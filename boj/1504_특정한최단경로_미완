#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int, int> pii;

int n, e, v1,v2;

vector<pii> edge[200001];

int dist[801];

bool v1b, v2b;

bool visit[801];

void search(int tnode) {
	visit[tnode] = true;

	if (tnode == v1) v1b = true;
	else if (tnode == v2) v2b = true;

	for (int i = 0; i < edge[tnode].size(); i++) {
		int nnode = edge[tnode][i].first,
			ncost = edge[tnode][i].second;

		if (visit[nnode]) continue;
		if (dist[tnode] - ncost == dist[nnode])
			search(nnode);
	}
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n >> e;
	int a, b, c;
	for (int i = 0; i < e; i++) {
		cin >> a >> b >> c;
		edge[a].push_back({ b,c });
		edge[b].push_back({ a,c });
	}
	cin >> v1 >> v2;
	
	
	priority_queue<pii> q;
	for (int i = 2; i <= n; i++) dist[i] = 1e9;
	q.push({ 0,1 });
	while (q.size()) {
		pii t = q.top(); q.pop();
		int tdist = t.first,
			tnode = t.second;
		
		if (dist[tnode] < tdist) continue;

		for (int i = 0; i < edge[tnode].size(); i++) {
			pii tt = edge[tnode][i];
			int nnode = tt.first,
				cost = tt.second;

			if (dist[nnode] > cost + tdist) {
				dist[nnode] = cost + tdist;
				q.push({ dist[nnode],nnode });
			}
		}
	}
}